#cloud-config

write_files:
- path: /etc/flannel/options.env
  content: |
    FLANNELD_IFACE=$private_ipv4
    FLANNELD_ETCD_ENDPOINTS=http://127.0.0.1:2379
- path: /etc/kubernetes/manifests/kube-apiserver.yaml
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: kube-apiserver
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: kube-apiserver
        image: quay.io/coreos/hyperkube:v${K8S_VERSION}_coreos.0
        command:
        - /hyperkube
        - apiserver
        - --insecure-bind-address=0.0.0.0
        - --insecure-port=8080
        - --etcd-servers=http://127.0.0.1:2379
        - --allow-privileged=true
        - --service-cluster-ip-range=${SERVICE_IP_RANGE}
        - --advertise-address=$private_ipv4
        - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota
        - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true
        - --cloud-provider=aws
        ports:
        - containerPort: 8080
          hostPort: 8080
          name: http
- path: /etc/kubernetes/manifests/kube-proxy.yaml
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: kube-proxy
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: kube-proxy
        image: quay.io/coreos/hyperkube:v${K8S_VERSION}_coreos.0
        command:
        - /hyperkube
        - proxy
        - --master=http://127.0.0.1:8080
        - --proxy-mode=iptables
        securityContext:
          privileged: true
- path: /etc/kubernetes/manifests/kube-controller-manager.yaml
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: kube-controller-manager
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: kube-controller-manager
        image: quay.io/coreos/hyperkube:v${K8S_VERSION}_coreos.0
        command:
        - /hyperkube
        - controller-manager
        - --master=http://127.0.0.1:8080
        - --leader-elect=true
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 10252
          initialDelaySeconds: 15
          timeoutSeconds: 1
- path: /etc/kubernetes/manifests/kube-scheduler.yaml
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: kube-scheduler
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: kube-scheduler
        image: quay.io/coreos/hyperkube:v${K8S_VERSION}_coreos.0
        command:
        - /hyperkube
        - scheduler
        - --master=http://127.0.0.1:8080
        - --leader-elect=true
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 10251
          initialDelaySeconds: 15
          timeoutSeconds: 1
- path: /etc/kubernetes/manifests/kube-dns.yaml
  content: |
    apiVersion: v1
    kind: Service
    metadata:
      name: kube-dns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        kubernetes.io/name: "KubeDNS"
    spec:
      selector:
        k8s-app: kube-dns
      clusterIP: ${DNS_SERVICE_IP}
      ports:
      - name: dns
        port: 53
        protocol: UDP
      - name: dns-tcp
        port: 53
        protocol: TCP
- path: /etc/kubernetes/manifests/kube-dns-rc.yaml
  content: |
    apiVersion: v1
    kind: ReplicationController
    metadata:
      name: kube-dns-v11
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        version: v11
        kubernetes.io/cluster-service: "true"
    spec:
      replicas: 1
      selector:
        k8s-app: kube-dns
        version: v11
      template:
        metadata:
          labels:
            k8s-app: kube-dns
            version: v11
            kubernetes.io/cluster-service: "true"
        spec:
          containers:
          - name: etcd
            image: gcr.io/google_containers/etcd-amd64:2.2.1
            resources:
              limits:
                cpu: 100m
                memory: 500Mi
              requests:
                cpu: 100m
                memory: 50Mi
            command:
            - /usr/local/bin/etcd
            - -data-dir
            - /var/etcd/data
            - -listen-client-urls
            - http://127.0.0.1:2379,http://127.0.0.1:4001
            - -advertise-client-urls
            - http://127.0.0.1:2379,http://127.0.0.1:4001
            - -initial-cluster-token
            - skydns-etcd
            volumeMounts:
            - name: etcd-storage
              mountPath: /var/etcd/data
          - name: kube2sky
            image: gcr.io/google_containers/kube2sky:1.14
            resources:
              limits:
                cpu: 100m
                memory: 200Mi
              requests:
                cpu: 100m
                memory: 50Mi
            livenessProbe:
              httpGet:
                path: /healthz
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              successThreshold: 1
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /readiness
                port: 8081
                scheme: HTTP
              initialDelaySeconds: 30
              timeoutSeconds: 5
            args:
            # command = "/kube2sky"
            - --domain=cluster.local
          - name: skydns
            image: gcr.io/google_containers/skydns:2015-10-13-8c72f8c
            resources:
              limits:
                cpu: 100m
                memory: 200Mi
              requests:
                cpu: 100m
                memory: 50Mi
            args:
            # command = "/skydns"
            - -machines=http://127.0.0.1:4001
            - -addr=0.0.0.0:53
            - -ns-rotate=false
            - -domain=cluster.local.
            ports:
            - containerPort: 53
              name: dns
              protocol: UDP
            - containerPort: 53
              name: dns-tcp
              protocol: TCP
          - name: healthz
            image: gcr.io/google_containers/exechealthz:1.0
            resources:
              limits:
                cpu: 10m
                memory: 20Mi
              requests:
                cpu: 10m
                memory: 20Mi
            args:
            - -cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 >/dev/null
            - -port=8080
            ports:
            - containerPort: 8080
              protocol: TCP
          volumes:
          - name: etcd-storage
            emptyDir: {}
          dnsPolicy: Default

coreos:
  etcd2:
    listen-client-urls: "http://0.0.0.0:2379"
    initial-cluster: "default=${ETCD_CLUSTER}"
    proxy: on
  update:
    reboot-strategy: "off"
  units:
  - name: etcd2.service
    command: start
  - name: flanneld.service
    drop-ins:
      - name: 40-ExecStartPre-symlink.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
          ExecStartPre=/usr/bin/curl -X PUT -d "value={\"Network\":\"${POD_NETWORK}\",\"Backend\":{\"Type\":\"vxlan\"}}" "http://127.0.0.1:2379/v2/keys/coreos.com/network/config"
  - name: docker.service
    drop-ins:
      - name: 40-flannel.conf
        content: |
          [Unit]
          Requires=flanneld.service
          After=flanneld.service
  - name: kubelet.service
    command: start
    enable: true
    content: |
      [Service]
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests

      Environment="RKT_OPTS=--volume=resolv,kind=host,source=/etc/resolv.conf --mount volume=resolv,target=/etc/resolv.conf"
      Environment=KUBELET_VERSION=v${K8S_VERSION}_coreos.0
      ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --api-servers=http://127.0.0.1:8080 \
        --register-schedulable=false \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --hostname-override=$private_ipv4 \
        --cluster-dns=${DNS_SERVICE_IP} \
        --cluster-domain=cluster.local
      Restart=always
      RestartSec=10
      [Install]
      WantedBy=multi-user.target
