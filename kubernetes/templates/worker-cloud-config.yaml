#cloud-config

write_files:
- path: /etc/kubernetes/ssl/worker-ssl.sh
  permissions: '0755'
  content: |
    #!/bin/bash
    set -e

    SSL_DIR="/etc/kubernetes/ssl"
    WORKER_FQDN="$(hostname)"
    WORKER_IP="$(curl -s 169.254.169.254/latest/meta-data/local-ipv4)"

    cd $SSL_DIR

    cat <<'EOF' | sudo tee "worker-openssl.cnf"
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alt_names
    [alt_names]
    IP.1 = $ENV::WORKER_IP
    EOF

    openssl genrsa -out $${WORKER_FQDN}-worker-key.pem 2048
    WORKER_IP=$${WORKER_IP} openssl req -new -key $${WORKER_FQDN}-worker-key.pem -out $${WORKER_FQDN}-worker.csr -subj "/CN=$${WORKER_FQDN}" -config worker-openssl.cnf
    WORKER_IP=$${WORKER_IP} openssl x509 -req -in $${WORKER_FQDN}-worker.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out $${WORKER_FQDN}-worker.pem -days 365 -extensions v3_req -extfile worker-openssl.cnf

    rm ca-key.pem ca.srl worker-openssl.cnf $${WORKER_FQDN}-worker.csr

    chmod 600 $${WORKER_FQDN}-worker-key.pem

    ln -s $${WORKER_FQDN}-worker.pem worker.pem
    ln -s $${WORKER_FQDN}-worker-key.pem worker-key.pem

    rm -- "$0"
- path: /etc/kubernetes/ssl/ca.pem
  content: ${CA_PEM}
  encoding: base64
- path: /etc/kubernetes/ssl/ca-key.pem
  content: ${CA_KEY}
  encoding: base64
  permissions: '0600'
  owner: root
- path: /etc/flannel/options.env
  content: |
    FLANNELD_IFACE=$private_ipv4
    FLANNELD_ETCD_ENDPOINTS=http://0.0.0.0:2379
- path: /etc/kubernetes/manifests/kube-proxy.yaml
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: kube-proxy
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: kube-proxy
        image: quay.io/coreos/hyperkube:${K8S_VER}
        command:
        - /hyperkube
        - proxy
        - --master=https://${MASTER_HOST}
        - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
        - --proxy-mode=iptables
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /etc/ssl/certs
            name: "ssl-certs"
          - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
            name: "kubeconfig"
            readOnly: true
          - mountPath: /etc/kubernetes/ssl
            name: "etc-kube-ssl"
            readOnly: true
      volumes:
        - name: "ssl-certs"
          hostPath:
            path: "/usr/share/ca-certificates"
        - name: "kubeconfig"
          hostPath:
            path: "/etc/kubernetes/worker-kubeconfig.yaml"
        - name: "etc-kube-ssl"
          hostPath:
            path: "/etc/kubernetes/ssl"
- path: /etc/kubernetes/worker-kubeconfig.yaml
  content: |
    apiVersion: v1
    kind: Config
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/ca.pem
    users:
    - name: kubelet
      user:
        client-certificate: /etc/kubernetes/ssl/worker.pem
        client-key: /etc/kubernetes/ssl/worker-key.pem
    contexts:
    - context:
        cluster: local
        user: kubelet
      name: kubelet-context
    current-context: kubelet-context

coreos:
  etcd2:
    listen-client-urls: "http://0.0.0.0:2379"
    initial-cluster: "default=${ETCD_PROXY_INITIAL_CLUSTER}"
    proxy: on
  update:
    reboot-strategy: off
  units:
  - name: etcd2.service
    command: start
  - name: flanneld.service
    drop-ins:
      - name: 40-ExecStartPre-symlink.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
  - name: docker.service
    drop-ins:
      - name: 40-flannel.conf
        content: |
          [Unit]
          Requires=flanneld.service
          After=flanneld.service
  - name: ssl.service
    command: start
    content: |
      [Service]
      ExecStart=/bin/bash /etc/kubernetes/ssl/worker-ssl.sh
      RemainAfterExit=yes
      Type=oneshot
  - name: kubelet.service
    command: start
    enable: true
    content: |
      [Unit]
      Requires=ssl.service
      After=ssl.service

      [Service]
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests

      Environment="RKT_OPTS=--volume=resolv,kind=host,source=/etc/resolv.conf --mount volume=resolv,target=/etc/resolv.conf"
      Environment=KUBELET_VERSION=${K8S_VER}
      ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --api-servers=https://${MASTER_HOST} \
        --cloud-provider=aws \
        --network-plugin-dir=/etc/kubernetes/cni/net.d \
        --register-node=true \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --hostname-override=$private_ipv4 \
        --cluster-dns=${DNS_SERVICE_IP} \
        --cluster-domain=cluster.local \
        --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
      Restart=always
      RestartSec=10
      [Install]
      WantedBy=multi-user.target
